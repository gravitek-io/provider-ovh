// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AddressesInitParameters struct {
}

type AddressesObservation struct {
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`
}

type AddressesParameters struct {
}

type AttachedVolumesInitParameters struct {
}

type AttachedVolumesObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AttachedVolumesParameters struct {
}

type AutoBackupInitParameters struct {

	// Unix cron pattern
	Cron *string `json:"cron,omitempty" tf:"cron,omitempty"`

	// Number of backup to keep
	Rotation *float64 `json:"rotation,omitempty" tf:"rotation,omitempty"`
}

type AutoBackupObservation struct {

	// Unix cron pattern
	Cron *string `json:"cron,omitempty" tf:"cron,omitempty"`

	// Number of backup to keep
	Rotation *float64 `json:"rotation,omitempty" tf:"rotation,omitempty"`
}

type AutoBackupParameters struct {

	// Unix cron pattern
	// +kubebuilder:validation:Optional
	Cron *string `json:"cron" tf:"cron,omitempty"`

	// Number of backup to keep
	// +kubebuilder:validation:Optional
	Rotation *float64 `json:"rotation" tf:"rotation,omitempty"`
}

type BootFromInitParameters struct {

	// Instance image id
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// Instance volume id
	VolumeID *string `json:"volumeId,omitempty" tf:"volume_id,omitempty"`
}

type BootFromObservation struct {

	// Instance image id
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// Instance volume id
	VolumeID *string `json:"volumeId,omitempty" tf:"volume_id,omitempty"`
}

type BootFromParameters struct {

	// Instance image id
	// +kubebuilder:validation:Optional
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// Instance volume id
	// +kubebuilder:validation:Optional
	VolumeID *string `json:"volumeId,omitempty" tf:"volume_id,omitempty"`
}

type FlavorInitParameters struct {

	// Flavor id
	FlavorID *string `json:"flavorId,omitempty" tf:"flavor_id,omitempty"`
}

type FlavorObservation struct {

	// Flavor id
	FlavorID *string `json:"flavorId,omitempty" tf:"flavor_id,omitempty"`
}

type FlavorParameters struct {

	// Flavor id
	// +kubebuilder:validation:Optional
	FlavorID *string `json:"flavorId" tf:"flavor_id,omitempty"`
}

type FloatingIPCreateInitParameters struct {

	// Floating IP description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`
}

type FloatingIPCreateObservation struct {

	// Floating IP description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`
}

type FloatingIPCreateParameters struct {

	// Floating IP description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`
}

type FloatingIPInitParameters struct {

	// Floating IP ID
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type FloatingIPObservation struct {

	// Floating IP ID
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type FloatingIPParameters struct {

	// Floating IP ID
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type GatewayCreateInitParameters struct {

	// Gateway model
	Model *string `json:"model,omitempty" tf:"model,omitempty"`

	// Gateway name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type GatewayCreateObservation struct {

	// Gateway model
	Model *string `json:"model,omitempty" tf:"model,omitempty"`

	// Gateway name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type GatewayCreateParameters struct {

	// Gateway model
	// +kubebuilder:validation:Optional
	Model *string `json:"model,omitempty" tf:"model,omitempty"`

	// Gateway name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type GatewayInitParameters struct {

	// Existing gateway ID
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type GatewayObservation struct {

	// Existing gateway ID
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type GatewayParameters struct {

	// Existing gateway ID
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type GroupInitParameters struct {

	// Group id
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`
}

type GroupObservation struct {

	// Group id
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`
}

type GroupParameters struct {

	// Group id
	// +kubebuilder:validation:Optional
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`
}

type NetworkCreateInitParameters struct {

	// Network name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// New subnet information
	Subnet []SubnetInitParameters `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// Network vlan ID
	VlanID *float64 `json:"vlanId,omitempty" tf:"vlan_id,omitempty"`
}

type NetworkCreateObservation struct {

	// Network name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// New subnet information
	Subnet []SubnetObservation `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// Network vlan ID
	VlanID *float64 `json:"vlanId,omitempty" tf:"vlan_id,omitempty"`
}

type NetworkCreateParameters struct {

	// Network name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// New subnet information
	// +kubebuilder:validation:Optional
	Subnet []SubnetParameters `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// Network vlan ID
	// +kubebuilder:validation:Optional
	VlanID *float64 `json:"vlanId,omitempty" tf:"vlan_id,omitempty"`
}

type NetworkInitParameters struct {

	// Private network information
	Private []PrivateInitParameters `json:"private,omitempty" tf:"private,omitempty"`

	// Set the new instance as public
	Public *bool `json:"public,omitempty" tf:"public,omitempty"`
}

type NetworkObservation struct {

	// Private network information
	Private []PrivateObservation `json:"private,omitempty" tf:"private,omitempty"`

	// Set the new instance as public
	Public *bool `json:"public,omitempty" tf:"public,omitempty"`
}

type NetworkParameters struct {

	// Private network information
	// +kubebuilder:validation:Optional
	Private []PrivateParameters `json:"private,omitempty" tf:"private,omitempty"`

	// Set the new instance as public
	// +kubebuilder:validation:Optional
	Public *bool `json:"public,omitempty" tf:"public,omitempty"`
}

type PrivateInitParameters struct {

	// Existing floating IP
	FloatingIP []FloatingIPInitParameters `json:"floatingIp,omitempty" tf:"floating_ip,omitempty"`

	// Information to create a new floating IP
	FloatingIPCreate []FloatingIPCreateInitParameters `json:"floatingIpCreate,omitempty" tf:"floating_ip_create,omitempty"`

	// Existing gateway
	Gateway []GatewayInitParameters `json:"gateway,omitempty" tf:"gateway,omitempty"`

	// Information to create a new gateway
	GatewayCreate []GatewayCreateInitParameters `json:"gatewayCreate,omitempty" tf:"gateway_create,omitempty"`

	// Instance IP in the private network
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// Existing private network
	Network []PrivateNetworkInitParameters `json:"network,omitempty" tf:"network,omitempty"`

	// Information to create a new private network
	NetworkCreate []NetworkCreateInitParameters `json:"networkCreate,omitempty" tf:"network_create,omitempty"`
}

type PrivateNetworkInitParameters struct {

	// Existing network ID
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Existing subnet ID
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type PrivateNetworkObservation struct {

	// Existing network ID
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Existing subnet ID
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type PrivateNetworkParameters struct {

	// Existing network ID
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Existing subnet ID
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type PrivateObservation struct {

	// Existing floating IP
	FloatingIP []FloatingIPObservation `json:"floatingIp,omitempty" tf:"floating_ip,omitempty"`

	// Information to create a new floating IP
	FloatingIPCreate []FloatingIPCreateObservation `json:"floatingIpCreate,omitempty" tf:"floating_ip_create,omitempty"`

	// Existing gateway
	Gateway []GatewayObservation `json:"gateway,omitempty" tf:"gateway,omitempty"`

	// Information to create a new gateway
	GatewayCreate []GatewayCreateObservation `json:"gatewayCreate,omitempty" tf:"gateway_create,omitempty"`

	// Instance IP in the private network
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// Existing private network
	Network []PrivateNetworkObservation `json:"network,omitempty" tf:"network,omitempty"`

	// Information to create a new private network
	NetworkCreate []NetworkCreateObservation `json:"networkCreate,omitempty" tf:"network_create,omitempty"`
}

type PrivateParameters struct {

	// Existing floating IP
	// +kubebuilder:validation:Optional
	FloatingIP []FloatingIPParameters `json:"floatingIp,omitempty" tf:"floating_ip,omitempty"`

	// Information to create a new floating IP
	// +kubebuilder:validation:Optional
	FloatingIPCreate []FloatingIPCreateParameters `json:"floatingIpCreate,omitempty" tf:"floating_ip_create,omitempty"`

	// Existing gateway
	// +kubebuilder:validation:Optional
	Gateway []GatewayParameters `json:"gateway,omitempty" tf:"gateway,omitempty"`

	// Information to create a new gateway
	// +kubebuilder:validation:Optional
	GatewayCreate []GatewayCreateParameters `json:"gatewayCreate,omitempty" tf:"gateway_create,omitempty"`

	// Instance IP in the private network
	// +kubebuilder:validation:Optional
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// Existing private network
	// +kubebuilder:validation:Optional
	Network []PrivateNetworkParameters `json:"network,omitempty" tf:"network,omitempty"`

	// Information to create a new private network
	// +kubebuilder:validation:Optional
	NetworkCreate []NetworkCreateParameters `json:"networkCreate,omitempty" tf:"network_create,omitempty"`
}

type ProjectInstanceInitParameters struct {

	// Create an autobackup workflow after instance start up
	AutoBackup []AutoBackupInitParameters `json:"autoBackup,omitempty" tf:"auto_backup,omitempty"`

	// The availability zone where the instance will be created
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Billing period - hourly | monthly
	BillingPeriod *string `json:"billingPeriod,omitempty" tf:"billing_period,omitempty"`

	// Boot the instance from an image or a volume
	BootFrom []BootFromInitParameters `json:"bootFrom,omitempty" tf:"boot_from,omitempty"`

	// Create multiple instances
	Bulk *float64 `json:"bulk,omitempty" tf:"bulk,omitempty"`

	// Flavor information
	Flavor []FlavorInitParameters `json:"flavor,omitempty" tf:"flavor,omitempty"`

	// Start instance in group
	Group []GroupInitParameters `json:"group,omitempty" tf:"group,omitempty"`

	// Instance name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Network information
	Network []NetworkInitParameters `json:"network,omitempty" tf:"network,omitempty"`

	// Instance region
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Existing SSH Key pair
	SSHKey []SSHKeyInitParameters `json:"sshKey,omitempty" tf:"ssh_key,omitempty"`

	// Add existing SSH Key pair into your Public Cloud project and link it to the instance
	SSHKeyCreate []SSHKeyCreateInitParameters `json:"sshKeyCreate,omitempty" tf:"ssh_key_create,omitempty"`

	// Service name of the resource representing the id of the cloud project
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Configuration information or scripts to use upon launch
	UserData *string `json:"userData,omitempty" tf:"user_data,omitempty"`
}

type ProjectInstanceObservation struct {

	// Instance IP addresses
	Addresses []AddressesObservation `json:"addresses,omitempty" tf:"addresses,omitempty"`

	// Volumes attached to the instance
	AttachedVolumes []AttachedVolumesObservation `json:"attachedVolumes,omitempty" tf:"attached_volumes,omitempty"`

	// Create an autobackup workflow after instance start up
	AutoBackup []AutoBackupObservation `json:"autoBackup,omitempty" tf:"auto_backup,omitempty"`

	// The availability zone where the instance will be created
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Billing period - hourly | monthly
	BillingPeriod *string `json:"billingPeriod,omitempty" tf:"billing_period,omitempty"`

	// Boot the instance from an image or a volume
	BootFrom []BootFromObservation `json:"bootFrom,omitempty" tf:"boot_from,omitempty"`

	// Create multiple instances
	Bulk *float64 `json:"bulk,omitempty" tf:"bulk,omitempty"`

	// Flavor information
	Flavor []FlavorObservation `json:"flavor,omitempty" tf:"flavor,omitempty"`

	// Flavor id
	FlavorID *string `json:"flavorId,omitempty" tf:"flavor_id,omitempty"`

	// Flavor name
	FlavorName *string `json:"flavorName,omitempty" tf:"flavor_name,omitempty"`

	// Start instance in group
	Group []GroupObservation `json:"group,omitempty" tf:"group,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Image id
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// Instance name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Network information
	Network []NetworkObservation `json:"network,omitempty" tf:"network,omitempty"`

	// Instance region
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Existing SSH Key pair
	SSHKey []SSHKeyObservation `json:"sshKey,omitempty" tf:"ssh_key,omitempty"`

	// Add existing SSH Key pair into your Public Cloud project and link it to the instance
	SSHKeyCreate []SSHKeyCreateObservation `json:"sshKeyCreate,omitempty" tf:"ssh_key_create,omitempty"`

	// Service name of the resource representing the id of the cloud project
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Instance status
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Instance task state
	TaskState *string `json:"taskState,omitempty" tf:"task_state,omitempty"`

	// Configuration information or scripts to use upon launch
	UserData *string `json:"userData,omitempty" tf:"user_data,omitempty"`
}

type ProjectInstanceParameters struct {

	// Create an autobackup workflow after instance start up
	// +kubebuilder:validation:Optional
	AutoBackup []AutoBackupParameters `json:"autoBackup,omitempty" tf:"auto_backup,omitempty"`

	// The availability zone where the instance will be created
	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Billing period - hourly | monthly
	// +kubebuilder:validation:Optional
	BillingPeriod *string `json:"billingPeriod,omitempty" tf:"billing_period,omitempty"`

	// Boot the instance from an image or a volume
	// +kubebuilder:validation:Optional
	BootFrom []BootFromParameters `json:"bootFrom,omitempty" tf:"boot_from,omitempty"`

	// Create multiple instances
	// +kubebuilder:validation:Optional
	Bulk *float64 `json:"bulk,omitempty" tf:"bulk,omitempty"`

	// Flavor information
	// +kubebuilder:validation:Optional
	Flavor []FlavorParameters `json:"flavor,omitempty" tf:"flavor,omitempty"`

	// Start instance in group
	// +kubebuilder:validation:Optional
	Group []GroupParameters `json:"group,omitempty" tf:"group,omitempty"`

	// Instance name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Network information
	// +kubebuilder:validation:Optional
	Network []NetworkParameters `json:"network,omitempty" tf:"network,omitempty"`

	// Instance region
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Existing SSH Key pair
	// +kubebuilder:validation:Optional
	SSHKey []SSHKeyParameters `json:"sshKey,omitempty" tf:"ssh_key,omitempty"`

	// Add existing SSH Key pair into your Public Cloud project and link it to the instance
	// +kubebuilder:validation:Optional
	SSHKeyCreate []SSHKeyCreateParameters `json:"sshKeyCreate,omitempty" tf:"ssh_key_create,omitempty"`

	// Service name of the resource representing the id of the cloud project
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Configuration information or scripts to use upon launch
	// +kubebuilder:validation:Optional
	UserData *string `json:"userData,omitempty" tf:"user_data,omitempty"`
}

type SSHKeyCreateInitParameters struct {

	// SSH Key pair name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// SSH Public Key
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`
}

type SSHKeyCreateObservation struct {

	// SSH Key pair name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// SSH Public Key
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`
}

type SSHKeyCreateParameters struct {

	// SSH Key pair name
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// SSH Public Key
	// +kubebuilder:validation:Optional
	PublicKey *string `json:"publicKey" tf:"public_key,omitempty"`
}

type SSHKeyInitParameters struct {

	// SSH Key pair name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type SSHKeyObservation struct {

	// SSH Key pair name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type SSHKeyParameters struct {

	// SSH Key pair name
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`
}

type SubnetInitParameters struct {

	// Subnet range in CIDR notation
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	EnableDHCP *bool `json:"enableDhcp,omitempty" tf:"enable_dhcp,omitempty"`

	// IP version
	IPVersion *float64 `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`
}

type SubnetObservation struct {

	// Subnet range in CIDR notation
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	EnableDHCP *bool `json:"enableDhcp,omitempty" tf:"enable_dhcp,omitempty"`

	// IP version
	IPVersion *float64 `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`
}

type SubnetParameters struct {

	// Subnet range in CIDR notation
	// +kubebuilder:validation:Optional
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// +kubebuilder:validation:Optional
	EnableDHCP *bool `json:"enableDhcp,omitempty" tf:"enable_dhcp,omitempty"`

	// IP version
	// +kubebuilder:validation:Optional
	IPVersion *float64 `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`
}

// ProjectInstanceSpec defines the desired state of ProjectInstance
type ProjectInstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProjectInstanceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProjectInstanceInitParameters `json:"initProvider,omitempty"`
}

// ProjectInstanceStatus defines the observed state of ProjectInstance.
type ProjectInstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProjectInstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ProjectInstance is the Schema for the ProjectInstances API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type ProjectInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.billingPeriod) || (has(self.initProvider) && has(self.initProvider.billingPeriod))",message="spec.forProvider.billingPeriod is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.bootFrom) || (has(self.initProvider) && has(self.initProvider.bootFrom))",message="spec.forProvider.bootFrom is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.flavor) || (has(self.initProvider) && has(self.initProvider.flavor))",message="spec.forProvider.flavor is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.network) || (has(self.initProvider) && has(self.initProvider.network))",message="spec.forProvider.network is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.region) || (has(self.initProvider) && has(self.initProvider.region))",message="spec.forProvider.region is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceName) || (has(self.initProvider) && has(self.initProvider.serviceName))",message="spec.forProvider.serviceName is a required parameter"
	Spec   ProjectInstanceSpec   `json:"spec"`
	Status ProjectInstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectInstanceList contains a list of ProjectInstances
type ProjectInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProjectInstance `json:"items"`
}

// Repository type metadata.
var (
	ProjectInstance_Kind             = "ProjectInstance"
	ProjectInstance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProjectInstance_Kind}.String()
	ProjectInstance_KindAPIVersion   = ProjectInstance_Kind + "." + CRDGroupVersion.String()
	ProjectInstance_GroupVersionKind = CRDGroupVersion.WithKind(ProjectInstance_Kind)
)

func init() {
	SchemeBuilder.Register(&ProjectInstance{}, &ProjectInstanceList{})
}
