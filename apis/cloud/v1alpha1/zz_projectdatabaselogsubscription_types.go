// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProjectDatabaseLogSubscriptionInitParameters struct {

	// Id of the database cluster
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Name of the engine of the service
	Engine *string `json:"engine,omitempty" tf:"engine,omitempty"`

	// Log kind name of this subscription
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Id of the target Log data platform stream
	StreamID *string `json:"streamId,omitempty" tf:"stream_id,omitempty"`
}

type ProjectDatabaseLogSubscriptionObservation struct {

	// Id of the database cluster
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Creation date of the subscription
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Name of the engine of the service
	Engine *string `json:"engine,omitempty" tf:"engine,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Log kind name of this subscription
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// Identifier of the operation
	OperationID *string `json:"operationId,omitempty" tf:"operation_id,omitempty"`

	// Name of subscribed resource, where the logs come from
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// Type of subscribed resource, where the logs come from
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Id of the target Log data platform stream
	StreamID *string `json:"streamId,omitempty" tf:"stream_id,omitempty"`

	// Last update date of the subscription
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type ProjectDatabaseLogSubscriptionParameters struct {

	// Id of the database cluster
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Name of the engine of the service
	// +kubebuilder:validation:Optional
	Engine *string `json:"engine,omitempty" tf:"engine,omitempty"`

	// Log kind name of this subscription
	// +kubebuilder:validation:Optional
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Id of the target Log data platform stream
	// +kubebuilder:validation:Optional
	StreamID *string `json:"streamId,omitempty" tf:"stream_id,omitempty"`
}

// ProjectDatabaseLogSubscriptionSpec defines the desired state of ProjectDatabaseLogSubscription
type ProjectDatabaseLogSubscriptionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProjectDatabaseLogSubscriptionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProjectDatabaseLogSubscriptionInitParameters `json:"initProvider,omitempty"`
}

// ProjectDatabaseLogSubscriptionStatus defines the observed state of ProjectDatabaseLogSubscription.
type ProjectDatabaseLogSubscriptionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProjectDatabaseLogSubscriptionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ProjectDatabaseLogSubscription is the Schema for the ProjectDatabaseLogSubscriptions API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type ProjectDatabaseLogSubscription struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clusterId) || (has(self.initProvider) && has(self.initProvider.clusterId))",message="spec.forProvider.clusterId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.engine) || (has(self.initProvider) && has(self.initProvider.engine))",message="spec.forProvider.engine is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.kind) || (has(self.initProvider) && has(self.initProvider.kind))",message="spec.forProvider.kind is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceName) || (has(self.initProvider) && has(self.initProvider.serviceName))",message="spec.forProvider.serviceName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.streamId) || (has(self.initProvider) && has(self.initProvider.streamId))",message="spec.forProvider.streamId is a required parameter"
	Spec   ProjectDatabaseLogSubscriptionSpec   `json:"spec"`
	Status ProjectDatabaseLogSubscriptionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectDatabaseLogSubscriptionList contains a list of ProjectDatabaseLogSubscriptions
type ProjectDatabaseLogSubscriptionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProjectDatabaseLogSubscription `json:"items"`
}

// Repository type metadata.
var (
	ProjectDatabaseLogSubscription_Kind             = "ProjectDatabaseLogSubscription"
	ProjectDatabaseLogSubscription_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProjectDatabaseLogSubscription_Kind}.String()
	ProjectDatabaseLogSubscription_KindAPIVersion   = ProjectDatabaseLogSubscription_Kind + "." + CRDGroupVersion.String()
	ProjectDatabaseLogSubscription_GroupVersionKind = CRDGroupVersion.WithKind(ProjectDatabaseLogSubscription_Kind)
)

func init() {
	SchemeBuilder.Register(&ProjectDatabaseLogSubscription{}, &ProjectDatabaseLogSubscriptionList{})
}
