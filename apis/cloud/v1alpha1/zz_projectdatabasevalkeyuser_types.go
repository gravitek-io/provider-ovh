// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProjectDatabaseValkeyUserInitParameters struct {

	// Categories of the user
	// +listType=set
	Categories []*string `json:"categories,omitempty" tf:"categories,omitempty"`

	// Channels of the user
	// +listType=set
	Channels []*string `json:"channels,omitempty" tf:"channels,omitempty"`

	// Id of the database cluster
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Commands of the user
	// +listType=set
	Commands []*string `json:"commands,omitempty" tf:"commands,omitempty"`

	// Keys of the user
	// +listType=set
	Keys []*string `json:"keys,omitempty" tf:"keys,omitempty"`

	// Name of the user
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Arbitrary string to change to trigger a password update
	PasswordReset *string `json:"passwordReset,omitempty" tf:"password_reset,omitempty"`

	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`
}

type ProjectDatabaseValkeyUserObservation struct {

	// Categories of the user
	// +listType=set
	Categories []*string `json:"categories,omitempty" tf:"categories,omitempty"`

	// Channels of the user
	// +listType=set
	Channels []*string `json:"channels,omitempty" tf:"channels,omitempty"`

	// Id of the database cluster
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Commands of the user
	// +listType=set
	Commands []*string `json:"commands,omitempty" tf:"commands,omitempty"`

	// Date of the creation of the user
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Keys of the user
	// +listType=set
	Keys []*string `json:"keys,omitempty" tf:"keys,omitempty"`

	// Name of the user
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Arbitrary string to change to trigger a password update
	PasswordReset *string `json:"passwordReset,omitempty" tf:"password_reset,omitempty"`

	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Current status of the user
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type ProjectDatabaseValkeyUserParameters struct {

	// Categories of the user
	// +kubebuilder:validation:Optional
	// +listType=set
	Categories []*string `json:"categories,omitempty" tf:"categories,omitempty"`

	// Channels of the user
	// +kubebuilder:validation:Optional
	// +listType=set
	Channels []*string `json:"channels,omitempty" tf:"channels,omitempty"`

	// Id of the database cluster
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Commands of the user
	// +kubebuilder:validation:Optional
	// +listType=set
	Commands []*string `json:"commands,omitempty" tf:"commands,omitempty"`

	// Keys of the user
	// +kubebuilder:validation:Optional
	// +listType=set
	Keys []*string `json:"keys,omitempty" tf:"keys,omitempty"`

	// Name of the user
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Arbitrary string to change to trigger a password update
	// +kubebuilder:validation:Optional
	PasswordReset *string `json:"passwordReset,omitempty" tf:"password_reset,omitempty"`

	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`
}

// ProjectDatabaseValkeyUserSpec defines the desired state of ProjectDatabaseValkeyUser
type ProjectDatabaseValkeyUserSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProjectDatabaseValkeyUserParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProjectDatabaseValkeyUserInitParameters `json:"initProvider,omitempty"`
}

// ProjectDatabaseValkeyUserStatus defines the observed state of ProjectDatabaseValkeyUser.
type ProjectDatabaseValkeyUserStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProjectDatabaseValkeyUserObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ProjectDatabaseValkeyUser is the Schema for the ProjectDatabaseValkeyUsers API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type ProjectDatabaseValkeyUser struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clusterId) || (has(self.initProvider) && has(self.initProvider.clusterId))",message="spec.forProvider.clusterId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceName) || (has(self.initProvider) && has(self.initProvider.serviceName))",message="spec.forProvider.serviceName is a required parameter"
	Spec   ProjectDatabaseValkeyUserSpec   `json:"spec"`
	Status ProjectDatabaseValkeyUserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectDatabaseValkeyUserList contains a list of ProjectDatabaseValkeyUsers
type ProjectDatabaseValkeyUserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProjectDatabaseValkeyUser `json:"items"`
}

// Repository type metadata.
var (
	ProjectDatabaseValkeyUser_Kind             = "ProjectDatabaseValkeyUser"
	ProjectDatabaseValkeyUser_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProjectDatabaseValkeyUser_Kind}.String()
	ProjectDatabaseValkeyUser_KindAPIVersion   = ProjectDatabaseValkeyUser_Kind + "." + CRDGroupVersion.String()
	ProjectDatabaseValkeyUser_GroupVersionKind = CRDGroupVersion.WithKind(ProjectDatabaseValkeyUser_Kind)
)

func init() {
	SchemeBuilder.Register(&ProjectDatabaseValkeyUser{}, &ProjectDatabaseValkeyUserList{})
}
