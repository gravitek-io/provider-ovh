// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProjectInstanceSnapshotInitParameters struct {

	// Instance ID
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Image name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Service name
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`
}

type ProjectInstanceSnapshotObservation struct {

	// Image creation date
	CreationDate *string `json:"creationDate,omitempty" tf:"creation_date,omitempty"`

	// Image usable only for this type of flavor if not null
	FlavorType *string `json:"flavorType,omitempty" tf:"flavor_type,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Instance ID
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Minimum disks required to use image
	MinDisk *float64 `json:"minDisk,omitempty" tf:"min_disk,omitempty"`

	// Minimum RAM required to use image
	MinRAM *float64 `json:"minRam,omitempty" tf:"min_ram,omitempty"`

	// Image name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Order plan code
	PlanCode *string `json:"planCode,omitempty" tf:"plan_code,omitempty"`

	// Image region
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Service name
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Image size (in GiB)
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Image status
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Tags about the image
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Image type
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// User to connect with
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// Image visibility
	Visibility *string `json:"visibility,omitempty" tf:"visibility,omitempty"`
}

type ProjectInstanceSnapshotParameters struct {

	// Instance ID
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Image name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Service name
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`
}

// ProjectInstanceSnapshotSpec defines the desired state of ProjectInstanceSnapshot
type ProjectInstanceSnapshotSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProjectInstanceSnapshotParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProjectInstanceSnapshotInitParameters `json:"initProvider,omitempty"`
}

// ProjectInstanceSnapshotStatus defines the observed state of ProjectInstanceSnapshot.
type ProjectInstanceSnapshotStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProjectInstanceSnapshotObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ProjectInstanceSnapshot is the Schema for the ProjectInstanceSnapshots API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type ProjectInstanceSnapshot struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instanceId) || (has(self.initProvider) && has(self.initProvider.instanceId))",message="spec.forProvider.instanceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceName) || (has(self.initProvider) && has(self.initProvider.serviceName))",message="spec.forProvider.serviceName is a required parameter"
	Spec   ProjectInstanceSnapshotSpec   `json:"spec"`
	Status ProjectInstanceSnapshotStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectInstanceSnapshotList contains a list of ProjectInstanceSnapshots
type ProjectInstanceSnapshotList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProjectInstanceSnapshot `json:"items"`
}

// Repository type metadata.
var (
	ProjectInstanceSnapshot_Kind             = "ProjectInstanceSnapshot"
	ProjectInstanceSnapshot_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProjectInstanceSnapshot_Kind}.String()
	ProjectInstanceSnapshot_KindAPIVersion   = ProjectInstanceSnapshot_Kind + "." + CRDGroupVersion.String()
	ProjectInstanceSnapshot_GroupVersionKind = CRDGroupVersion.WithKind(ProjectInstanceSnapshot_Kind)
)

func init() {
	SchemeBuilder.Register(&ProjectInstanceSnapshot{}, &ProjectInstanceSnapshotList{})
}
