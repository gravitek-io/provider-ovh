// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProjectVolumeBackupInitParameters struct {

	// name of the backup
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Region name
	RegionName *string `json:"regionName,omitempty" tf:"region_name,omitempty"`

	// Service name
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// ID of the volume to backup
	VolumeID *string `json:"volumeId,omitempty" tf:"volume_id,omitempty"`
}

type ProjectVolumeBackupObservation struct {

	// Creation date of the backup
	CreationDate *string `json:"creationDate,omitempty" tf:"creation_date,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// name of the backup
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Volume backup region
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Region name
	RegionName *string `json:"regionName,omitempty" tf:"region_name,omitempty"`

	// Service name
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Size of the backup in GiB
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Staus of the backup
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// ID of the volume to backup
	VolumeID *string `json:"volumeId,omitempty" tf:"volume_id,omitempty"`
}

type ProjectVolumeBackupParameters struct {

	// name of the backup
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Region name
	// +kubebuilder:validation:Optional
	RegionName *string `json:"regionName,omitempty" tf:"region_name,omitempty"`

	// Service name
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// ID of the volume to backup
	// +kubebuilder:validation:Optional
	VolumeID *string `json:"volumeId,omitempty" tf:"volume_id,omitempty"`
}

// ProjectVolumeBackupSpec defines the desired state of ProjectVolumeBackup
type ProjectVolumeBackupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProjectVolumeBackupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProjectVolumeBackupInitParameters `json:"initProvider,omitempty"`
}

// ProjectVolumeBackupStatus defines the observed state of ProjectVolumeBackup.
type ProjectVolumeBackupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProjectVolumeBackupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ProjectVolumeBackup is the Schema for the ProjectVolumeBackups API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type ProjectVolumeBackup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.regionName) || (has(self.initProvider) && has(self.initProvider.regionName))",message="spec.forProvider.regionName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceName) || (has(self.initProvider) && has(self.initProvider.serviceName))",message="spec.forProvider.serviceName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.volumeId) || (has(self.initProvider) && has(self.initProvider.volumeId))",message="spec.forProvider.volumeId is a required parameter"
	Spec   ProjectVolumeBackupSpec   `json:"spec"`
	Status ProjectVolumeBackupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectVolumeBackupList contains a list of ProjectVolumeBackups
type ProjectVolumeBackupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProjectVolumeBackup `json:"items"`
}

// Repository type metadata.
var (
	ProjectVolumeBackup_Kind             = "ProjectVolumeBackup"
	ProjectVolumeBackup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProjectVolumeBackup_Kind}.String()
	ProjectVolumeBackup_KindAPIVersion   = ProjectVolumeBackup_Kind + "." + CRDGroupVersion.String()
	ProjectVolumeBackup_GroupVersionKind = CRDGroupVersion.WithKind(ProjectVolumeBackup_Kind)
)

func init() {
	SchemeBuilder.Register(&ProjectVolumeBackup{}, &ProjectVolumeBackupList{})
}
