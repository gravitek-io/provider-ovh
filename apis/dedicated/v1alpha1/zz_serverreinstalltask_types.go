// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CustomizationsInitParameters struct {

	// Config Drive UserData
	ConfigDriveUserData *string `json:"configDriveUserData,omitempty" tf:"config_drive_user_data,omitempty"`

	// EFI bootloader path
	EfiBootloaderPath *string `json:"efiBootloaderPath,omitempty" tf:"efi_bootloader_path,omitempty"`

	// Image HTTP Headers
	// +mapType=granular
	HTTPHeaders map[string]*string `json:"httpHeaders,omitempty" tf:"http_headers,omitempty"`

	// Custom hostname
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// Image checksum
	ImageCheckSum *string `json:"imageCheckSum,omitempty" tf:"image_check_sum,omitempty"`

	// Checksum type
	ImageCheckSumType *string `json:"imageCheckSumType,omitempty" tf:"image_check_sum_type,omitempty"`

	// Image Type
	ImageType *string `json:"imageType,omitempty" tf:"image_type,omitempty"`

	// Image URL
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// Display Language
	Language *string `json:"language,omitempty" tf:"language,omitempty"`

	// Post-Installation Script
	PostInstallationScript *string `json:"postInstallationScript,omitempty" tf:"post_installation_script,omitempty"`

	// Post-Installation Script File Extension
	PostInstallationScriptExtension *string `json:"postInstallationScriptExtension,omitempty" tf:"post_installation_script_extension,omitempty"`

	// SSH Public Key
	SSHKey *string `json:"sshKey,omitempty" tf:"ssh_key,omitempty"`
}

type CustomizationsObservation struct {

	// Config Drive UserData
	ConfigDriveUserData *string `json:"configDriveUserData,omitempty" tf:"config_drive_user_data,omitempty"`

	// EFI bootloader path
	EfiBootloaderPath *string `json:"efiBootloaderPath,omitempty" tf:"efi_bootloader_path,omitempty"`

	// Image HTTP Headers
	// +mapType=granular
	HTTPHeaders map[string]*string `json:"httpHeaders,omitempty" tf:"http_headers,omitempty"`

	// Custom hostname
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// Image checksum
	ImageCheckSum *string `json:"imageCheckSum,omitempty" tf:"image_check_sum,omitempty"`

	// Checksum type
	ImageCheckSumType *string `json:"imageCheckSumType,omitempty" tf:"image_check_sum_type,omitempty"`

	// Image Type
	ImageType *string `json:"imageType,omitempty" tf:"image_type,omitempty"`

	// Image URL
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// Display Language
	Language *string `json:"language,omitempty" tf:"language,omitempty"`

	// Post-Installation Script
	PostInstallationScript *string `json:"postInstallationScript,omitempty" tf:"post_installation_script,omitempty"`

	// Post-Installation Script File Extension
	PostInstallationScriptExtension *string `json:"postInstallationScriptExtension,omitempty" tf:"post_installation_script_extension,omitempty"`

	// SSH Public Key
	SSHKey *string `json:"sshKey,omitempty" tf:"ssh_key,omitempty"`
}

type CustomizationsParameters struct {

	// Config Drive UserData
	// +kubebuilder:validation:Optional
	ConfigDriveUserData *string `json:"configDriveUserData,omitempty" tf:"config_drive_user_data,omitempty"`

	// EFI bootloader path
	// +kubebuilder:validation:Optional
	EfiBootloaderPath *string `json:"efiBootloaderPath,omitempty" tf:"efi_bootloader_path,omitempty"`

	// Image HTTP Headers
	// +kubebuilder:validation:Optional
	// +mapType=granular
	HTTPHeaders map[string]*string `json:"httpHeaders,omitempty" tf:"http_headers,omitempty"`

	// Custom hostname
	// +kubebuilder:validation:Optional
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// Image checksum
	// +kubebuilder:validation:Optional
	ImageCheckSum *string `json:"imageCheckSum,omitempty" tf:"image_check_sum,omitempty"`

	// Checksum type
	// +kubebuilder:validation:Optional
	ImageCheckSumType *string `json:"imageCheckSumType,omitempty" tf:"image_check_sum_type,omitempty"`

	// Image Type
	// +kubebuilder:validation:Optional
	ImageType *string `json:"imageType,omitempty" tf:"image_type,omitempty"`

	// Image URL
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// Display Language
	// +kubebuilder:validation:Optional
	Language *string `json:"language,omitempty" tf:"language,omitempty"`

	// Post-Installation Script
	// +kubebuilder:validation:Optional
	PostInstallationScript *string `json:"postInstallationScript,omitempty" tf:"post_installation_script,omitempty"`

	// Post-Installation Script File Extension
	// +kubebuilder:validation:Optional
	PostInstallationScriptExtension *string `json:"postInstallationScriptExtension,omitempty" tf:"post_installation_script_extension,omitempty"`

	// SSH Public Key
	// +kubebuilder:validation:Optional
	SSHKey *string `json:"sshKey,omitempty" tf:"ssh_key,omitempty"`
}

type ExtrasInitParameters struct {

	// LVM-specific parameters
	Lv []LvInitParameters `json:"lv,omitempty" tf:"lv,omitempty"`

	// ZFS-specific parameters
	Zp []ZpInitParameters `json:"zp,omitempty" tf:"zp,omitempty"`
}

type ExtrasObservation struct {

	// LVM-specific parameters
	Lv []LvObservation `json:"lv,omitempty" tf:"lv,omitempty"`

	// ZFS-specific parameters
	Zp []ZpObservation `json:"zp,omitempty" tf:"zp,omitempty"`
}

type ExtrasParameters struct {

	// LVM-specific parameters
	// +kubebuilder:validation:Optional
	Lv []LvParameters `json:"lv,omitempty" tf:"lv,omitempty"`

	// ZFS-specific parameters
	// +kubebuilder:validation:Optional
	Zp []ZpParameters `json:"zp,omitempty" tf:"zp,omitempty"`
}

type HardwareRaidInitParameters struct {

	// Number of arrays (default is 1)
	Arrays *float64 `json:"arrays,omitempty" tf:"arrays,omitempty"`

	// Total number of disks in the disk group involved in the hardware raid configuration (all disks of the disk group by default)
	Disks *float64 `json:"disks,omitempty" tf:"disks,omitempty"`

	// Hardware raid type (default is 1)
	RaidLevel *float64 `json:"raidLevel,omitempty" tf:"raid_level,omitempty"`

	// Number of disks in the disk group involved in the spare (default is 0)
	Spares *float64 `json:"spares,omitempty" tf:"spares,omitempty"`
}

type HardwareRaidObservation struct {

	// Number of arrays (default is 1)
	Arrays *float64 `json:"arrays,omitempty" tf:"arrays,omitempty"`

	// Total number of disks in the disk group involved in the hardware raid configuration (all disks of the disk group by default)
	Disks *float64 `json:"disks,omitempty" tf:"disks,omitempty"`

	// Hardware raid type (default is 1)
	RaidLevel *float64 `json:"raidLevel,omitempty" tf:"raid_level,omitempty"`

	// Number of disks in the disk group involved in the spare (default is 0)
	Spares *float64 `json:"spares,omitempty" tf:"spares,omitempty"`
}

type HardwareRaidParameters struct {

	// Number of arrays (default is 1)
	// +kubebuilder:validation:Optional
	Arrays *float64 `json:"arrays,omitempty" tf:"arrays,omitempty"`

	// Total number of disks in the disk group involved in the hardware raid configuration (all disks of the disk group by default)
	// +kubebuilder:validation:Optional
	Disks *float64 `json:"disks,omitempty" tf:"disks,omitempty"`

	// Hardware raid type (default is 1)
	// +kubebuilder:validation:Optional
	RaidLevel *float64 `json:"raidLevel,omitempty" tf:"raid_level,omitempty"`

	// Number of disks in the disk group involved in the spare (default is 0)
	// +kubebuilder:validation:Optional
	Spares *float64 `json:"spares,omitempty" tf:"spares,omitempty"`
}

type LayoutInitParameters struct {

	// Partition extras parameters
	Extras []ExtrasInitParameters `json:"extras,omitempty" tf:"extras,omitempty"`

	// File system type
	FileSystem *string `json:"fileSystem,omitempty" tf:"file_system,omitempty"`

	// Mount point
	MountPoint *string `json:"mountPoint,omitempty" tf:"mount_point,omitempty"`

	// Software raid type (default is 1)
	RaidLevel *float64 `json:"raidLevel,omitempty" tf:"raid_level,omitempty"`

	// Partition size in MiB (default value is 0)
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

type LayoutObservation struct {

	// Partition extras parameters
	Extras []ExtrasObservation `json:"extras,omitempty" tf:"extras,omitempty"`

	// File system type
	FileSystem *string `json:"fileSystem,omitempty" tf:"file_system,omitempty"`

	// Mount point
	MountPoint *string `json:"mountPoint,omitempty" tf:"mount_point,omitempty"`

	// Software raid type (default is 1)
	RaidLevel *float64 `json:"raidLevel,omitempty" tf:"raid_level,omitempty"`

	// Partition size in MiB (default value is 0)
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

type LayoutParameters struct {

	// Partition extras parameters
	// +kubebuilder:validation:Optional
	Extras []ExtrasParameters `json:"extras,omitempty" tf:"extras,omitempty"`

	// File system type
	// +kubebuilder:validation:Optional
	FileSystem *string `json:"fileSystem" tf:"file_system,omitempty"`

	// Mount point
	// +kubebuilder:validation:Optional
	MountPoint *string `json:"mountPoint" tf:"mount_point,omitempty"`

	// Software raid type (default is 1)
	// +kubebuilder:validation:Optional
	RaidLevel *float64 `json:"raidLevel,omitempty" tf:"raid_level,omitempty"`

	// Partition size in MiB (default value is 0)
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

type LvInitParameters struct {

	// Logical volume name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type LvObservation struct {

	// Logical volume name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type LvParameters struct {

	// Logical volume name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type PartitioningInitParameters struct {

	// Total number of disks in the disk group involved in the partitioning configuration (all disks of the disk group by default)
	Disks *float64 `json:"disks,omitempty" tf:"disks,omitempty"`

	// Custom partitioning layout (default is the default layout of the operating system's default partitioning scheme)
	Layout []LayoutInitParameters `json:"layout,omitempty" tf:"layout,omitempty"`

	// Partitioning scheme name
	SchemeName *string `json:"schemeName,omitempty" tf:"scheme_name,omitempty"`
}

type PartitioningObservation struct {

	// Total number of disks in the disk group involved in the partitioning configuration (all disks of the disk group by default)
	Disks *float64 `json:"disks,omitempty" tf:"disks,omitempty"`

	// Custom partitioning layout (default is the default layout of the operating system's default partitioning scheme)
	Layout []LayoutObservation `json:"layout,omitempty" tf:"layout,omitempty"`

	// Partitioning scheme name
	SchemeName *string `json:"schemeName,omitempty" tf:"scheme_name,omitempty"`
}

type PartitioningParameters struct {

	// Total number of disks in the disk group involved in the partitioning configuration (all disks of the disk group by default)
	// +kubebuilder:validation:Optional
	Disks *float64 `json:"disks,omitempty" tf:"disks,omitempty"`

	// Custom partitioning layout (default is the default layout of the operating system's default partitioning scheme)
	// +kubebuilder:validation:Optional
	Layout []LayoutParameters `json:"layout,omitempty" tf:"layout,omitempty"`

	// Partitioning scheme name
	// +kubebuilder:validation:Optional
	SchemeName *string `json:"schemeName,omitempty" tf:"scheme_name,omitempty"`
}

type ServerReinstallTaskInitParameters struct {

	// If set, reboot the server on the specified boot id during destroy phase
	BootidOnDestroy *float64 `json:"bootidOnDestroy,omitempty" tf:"bootid_on_destroy,omitempty"`

	// OS reinstallation customizations
	Customizations []CustomizationsInitParameters `json:"customizations,omitempty" tf:"customizations,omitempty"`

	// Operating System name
	Os *string `json:"os,omitempty" tf:"os,omitempty"`

	// Arbitrary properties to pass to cloud-init's config drive datasource
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`

	// The internal name of your dedicated server.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Storage configuration
	Storage []StorageInitParameters `json:"storage,omitempty" tf:"storage,omitempty"`
}

type ServerReinstallTaskObservation struct {

	// If set, reboot the server on the specified boot id during destroy phase
	BootidOnDestroy *float64 `json:"bootidOnDestroy,omitempty" tf:"bootid_on_destroy,omitempty"`

	// Details of this task
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// OS reinstallation customizations
	Customizations []CustomizationsObservation `json:"customizations,omitempty" tf:"customizations,omitempty"`

	// Completion date
	DoneDate *string `json:"doneDate,omitempty" tf:"done_date,omitempty"`

	// Function name
	Function *string `json:"function,omitempty" tf:"function,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Last update
	LastUpdate *string `json:"lastUpdate,omitempty" tf:"last_update,omitempty"`

	// Operating System name
	Os *string `json:"os,omitempty" tf:"os,omitempty"`

	// Arbitrary properties to pass to cloud-init's config drive datasource
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`

	// The internal name of your dedicated server.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Task Creation date
	StartDate *string `json:"startDate,omitempty" tf:"start_date,omitempty"`

	// Task status
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Storage configuration
	Storage []StorageObservation `json:"storage,omitempty" tf:"storage,omitempty"`
}

type ServerReinstallTaskParameters struct {

	// If set, reboot the server on the specified boot id during destroy phase
	// +kubebuilder:validation:Optional
	BootidOnDestroy *float64 `json:"bootidOnDestroy,omitempty" tf:"bootid_on_destroy,omitempty"`

	// OS reinstallation customizations
	// +kubebuilder:validation:Optional
	Customizations []CustomizationsParameters `json:"customizations,omitempty" tf:"customizations,omitempty"`

	// Operating System name
	// +kubebuilder:validation:Optional
	Os *string `json:"os,omitempty" tf:"os,omitempty"`

	// Arbitrary properties to pass to cloud-init's config drive datasource
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`

	// The internal name of your dedicated server.
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Storage configuration
	// +kubebuilder:validation:Optional
	Storage []StorageParameters `json:"storage,omitempty" tf:"storage,omitempty"`
}

type StorageInitParameters struct {

	// Disk group id (default is 0, meaning automatic)
	DiskGroupID *float64 `json:"diskGroupId,omitempty" tf:"disk_group_id,omitempty"`

	// Hardware Raid configurations (if not specified, all disks of the chosen disk group id will be configured in JBOD mode)
	HardwareRaid []HardwareRaidInitParameters `json:"hardwareRaid,omitempty" tf:"hardware_raid,omitempty"`

	// Partitioning configuration
	Partitioning []PartitioningInitParameters `json:"partitioning,omitempty" tf:"partitioning,omitempty"`
}

type StorageObservation struct {

	// Disk group id (default is 0, meaning automatic)
	DiskGroupID *float64 `json:"diskGroupId,omitempty" tf:"disk_group_id,omitempty"`

	// Hardware Raid configurations (if not specified, all disks of the chosen disk group id will be configured in JBOD mode)
	HardwareRaid []HardwareRaidObservation `json:"hardwareRaid,omitempty" tf:"hardware_raid,omitempty"`

	// Partitioning configuration
	Partitioning []PartitioningObservation `json:"partitioning,omitempty" tf:"partitioning,omitempty"`
}

type StorageParameters struct {

	// Disk group id (default is 0, meaning automatic)
	// +kubebuilder:validation:Optional
	DiskGroupID *float64 `json:"diskGroupId,omitempty" tf:"disk_group_id,omitempty"`

	// Hardware Raid configurations (if not specified, all disks of the chosen disk group id will be configured in JBOD mode)
	// +kubebuilder:validation:Optional
	HardwareRaid []HardwareRaidParameters `json:"hardwareRaid,omitempty" tf:"hardware_raid,omitempty"`

	// Partitioning configuration
	// +kubebuilder:validation:Optional
	Partitioning []PartitioningParameters `json:"partitioning,omitempty" tf:"partitioning,omitempty"`
}

type ZpInitParameters struct {

	// zpool name (generated automatically if not specified)
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ZpObservation struct {

	// zpool name (generated automatically if not specified)
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ZpParameters struct {

	// zpool name (generated automatically if not specified)
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

// ServerReinstallTaskSpec defines the desired state of ServerReinstallTask
type ServerReinstallTaskSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServerReinstallTaskParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ServerReinstallTaskInitParameters `json:"initProvider,omitempty"`
}

// ServerReinstallTaskStatus defines the observed state of ServerReinstallTask.
type ServerReinstallTaskStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServerReinstallTaskObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ServerReinstallTask is the Schema for the ServerReinstallTasks API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type ServerReinstallTask struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.os) || (has(self.initProvider) && has(self.initProvider.os))",message="spec.forProvider.os is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceName) || (has(self.initProvider) && has(self.initProvider.serviceName))",message="spec.forProvider.serviceName is a required parameter"
	Spec   ServerReinstallTaskSpec   `json:"spec"`
	Status ServerReinstallTaskStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServerReinstallTaskList contains a list of ServerReinstallTasks
type ServerReinstallTaskList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServerReinstallTask `json:"items"`
}

// Repository type metadata.
var (
	ServerReinstallTask_Kind             = "ServerReinstallTask"
	ServerReinstallTask_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServerReinstallTask_Kind}.String()
	ServerReinstallTask_KindAPIVersion   = ServerReinstallTask_Kind + "." + CRDGroupVersion.String()
	ServerReinstallTask_GroupVersionKind = CRDGroupVersion.WithKind(ServerReinstallTask_Kind)
)

func init() {
	SchemeBuilder.Register(&ServerReinstallTask{}, &ServerReinstallTaskList{})
}
