// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LogsOutputGraylogStreamInitParameters struct {

	// Cold storage compression method
	ColdStorageCompression *string `json:"coldStorageCompression,omitempty" tf:"cold_storage_compression,omitempty"`

	// ColdStorage content
	ColdStorageContent *string `json:"coldStorageContent,omitempty" tf:"cold_storage_content,omitempty"`

	// Is Cold storage enabled?
	ColdStorageEnabled *bool `json:"coldStorageEnabled,omitempty" tf:"cold_storage_enabled,omitempty"`

	// Notify on new Cold storage archive
	ColdStorageNotifyEnabled *bool `json:"coldStorageNotifyEnabled,omitempty" tf:"cold_storage_notify_enabled,omitempty"`

	// Cold storage retention in year
	ColdStorageRetention *float64 `json:"coldStorageRetention,omitempty" tf:"cold_storage_retention,omitempty"`

	// ColdStorage destination
	ColdStorageTarget *string `json:"coldStorageTarget,omitempty" tf:"cold_storage_target,omitempty"`

	// Stream description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Enable ES indexing
	IndexingEnabled *bool `json:"indexingEnabled,omitempty" tf:"indexing_enabled,omitempty"`

	// Maximum indexing size (in GB)
	IndexingMaxSize *float64 `json:"indexingMaxSize,omitempty" tf:"indexing_max_size,omitempty"`

	// If set, notify when size is near 80, 90 or 100 % of the maximum configured setting
	IndexingNotifyEnabled *bool `json:"indexingNotifyEnabled,omitempty" tf:"indexing_notify_enabled,omitempty"`

	// Parent stream ID
	ParentStreamID *string `json:"parentStreamId,omitempty" tf:"parent_stream_id,omitempty"`

	// If set, pause indexing when maximum size is reach
	PauseIndexingOnMaxSize *bool `json:"pauseIndexingOnMaxSize,omitempty" tf:"pause_indexing_on_max_size,omitempty"`

	// Retention ID
	RetentionID *string `json:"retentionId,omitempty" tf:"retention_id,omitempty"`

	// The service name
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Stream name
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// Enable Websocket
	WebSocketEnabled *bool `json:"webSocketEnabled,omitempty" tf:"web_socket_enabled,omitempty"`
}

type LogsOutputGraylogStreamObservation struct {

	// Indicates if the current user can create alert on the stream
	CanAlert *bool `json:"canAlert,omitempty" tf:"can_alert,omitempty"`

	// Cold storage compression method
	ColdStorageCompression *string `json:"coldStorageCompression,omitempty" tf:"cold_storage_compression,omitempty"`

	// ColdStorage content
	ColdStorageContent *string `json:"coldStorageContent,omitempty" tf:"cold_storage_content,omitempty"`

	// Is Cold storage enabled?
	ColdStorageEnabled *bool `json:"coldStorageEnabled,omitempty" tf:"cold_storage_enabled,omitempty"`

	// Notify on new Cold storage archive
	ColdStorageNotifyEnabled *bool `json:"coldStorageNotifyEnabled,omitempty" tf:"cold_storage_notify_enabled,omitempty"`

	// Cold storage retention in year
	ColdStorageRetention *float64 `json:"coldStorageRetention,omitempty" tf:"cold_storage_retention,omitempty"`

	// ColdStorage destination
	ColdStorageTarget *string `json:"coldStorageTarget,omitempty" tf:"cold_storage_target,omitempty"`

	// Stream creation
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Stream description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Enable ES indexing
	IndexingEnabled *bool `json:"indexingEnabled,omitempty" tf:"indexing_enabled,omitempty"`

	// Maximum indexing size (in GB)
	IndexingMaxSize *float64 `json:"indexingMaxSize,omitempty" tf:"indexing_max_size,omitempty"`

	// If set, notify when size is near 80, 90 or 100 % of the maximum configured setting
	IndexingNotifyEnabled *bool `json:"indexingNotifyEnabled,omitempty" tf:"indexing_notify_enabled,omitempty"`

	// Indicates if you are allowed to edit entry
	IsEditable *bool `json:"isEditable,omitempty" tf:"is_editable,omitempty"`

	// Indicates if you are allowed to share entry
	IsShareable *bool `json:"isShareable,omitempty" tf:"is_shareable,omitempty"`

	// Number of alert condition
	NbAlertCondition *float64 `json:"nbAlertCondition,omitempty" tf:"nb_alert_condition,omitempty"`

	// Number of coldstored archives
	NbArchive *float64 `json:"nbArchive,omitempty" tf:"nb_archive,omitempty"`

	// Parent stream ID
	ParentStreamID *string `json:"parentStreamId,omitempty" tf:"parent_stream_id,omitempty"`

	// If set, pause indexing when maximum size is reach
	PauseIndexingOnMaxSize *bool `json:"pauseIndexingOnMaxSize,omitempty" tf:"pause_indexing_on_max_size,omitempty"`

	// Retention ID
	RetentionID *string `json:"retentionId,omitempty" tf:"retention_id,omitempty"`

	// The service name
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Stream ID
	StreamID *string `json:"streamId,omitempty" tf:"stream_id,omitempty"`

	// Stream name
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// Stream last update
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// Enable Websocket
	WebSocketEnabled *bool `json:"webSocketEnabled,omitempty" tf:"web_socket_enabled,omitempty"`
}

type LogsOutputGraylogStreamParameters struct {

	// Cold storage compression method
	// +kubebuilder:validation:Optional
	ColdStorageCompression *string `json:"coldStorageCompression,omitempty" tf:"cold_storage_compression,omitempty"`

	// ColdStorage content
	// +kubebuilder:validation:Optional
	ColdStorageContent *string `json:"coldStorageContent,omitempty" tf:"cold_storage_content,omitempty"`

	// Is Cold storage enabled?
	// +kubebuilder:validation:Optional
	ColdStorageEnabled *bool `json:"coldStorageEnabled,omitempty" tf:"cold_storage_enabled,omitempty"`

	// Notify on new Cold storage archive
	// +kubebuilder:validation:Optional
	ColdStorageNotifyEnabled *bool `json:"coldStorageNotifyEnabled,omitempty" tf:"cold_storage_notify_enabled,omitempty"`

	// Cold storage retention in year
	// +kubebuilder:validation:Optional
	ColdStorageRetention *float64 `json:"coldStorageRetention,omitempty" tf:"cold_storage_retention,omitempty"`

	// ColdStorage destination
	// +kubebuilder:validation:Optional
	ColdStorageTarget *string `json:"coldStorageTarget,omitempty" tf:"cold_storage_target,omitempty"`

	// Stream description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Enable ES indexing
	// +kubebuilder:validation:Optional
	IndexingEnabled *bool `json:"indexingEnabled,omitempty" tf:"indexing_enabled,omitempty"`

	// Maximum indexing size (in GB)
	// +kubebuilder:validation:Optional
	IndexingMaxSize *float64 `json:"indexingMaxSize,omitempty" tf:"indexing_max_size,omitempty"`

	// If set, notify when size is near 80, 90 or 100 % of the maximum configured setting
	// +kubebuilder:validation:Optional
	IndexingNotifyEnabled *bool `json:"indexingNotifyEnabled,omitempty" tf:"indexing_notify_enabled,omitempty"`

	// Parent stream ID
	// +kubebuilder:validation:Optional
	ParentStreamID *string `json:"parentStreamId,omitempty" tf:"parent_stream_id,omitempty"`

	// If set, pause indexing when maximum size is reach
	// +kubebuilder:validation:Optional
	PauseIndexingOnMaxSize *bool `json:"pauseIndexingOnMaxSize,omitempty" tf:"pause_indexing_on_max_size,omitempty"`

	// Retention ID
	// +kubebuilder:validation:Optional
	RetentionID *string `json:"retentionId,omitempty" tf:"retention_id,omitempty"`

	// The service name
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Stream name
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// Enable Websocket
	// +kubebuilder:validation:Optional
	WebSocketEnabled *bool `json:"webSocketEnabled,omitempty" tf:"web_socket_enabled,omitempty"`
}

// LogsOutputGraylogStreamSpec defines the desired state of LogsOutputGraylogStream
type LogsOutputGraylogStreamSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LogsOutputGraylogStreamParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider LogsOutputGraylogStreamInitParameters `json:"initProvider,omitempty"`
}

// LogsOutputGraylogStreamStatus defines the observed state of LogsOutputGraylogStream.
type LogsOutputGraylogStreamStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LogsOutputGraylogStreamObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// LogsOutputGraylogStream is the Schema for the LogsOutputGraylogStreams API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type LogsOutputGraylogStream struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.description) || (has(self.initProvider) && has(self.initProvider.description))",message="spec.forProvider.description is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceName) || (has(self.initProvider) && has(self.initProvider.serviceName))",message="spec.forProvider.serviceName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.title) || (has(self.initProvider) && has(self.initProvider.title))",message="spec.forProvider.title is a required parameter"
	Spec   LogsOutputGraylogStreamSpec   `json:"spec"`
	Status LogsOutputGraylogStreamStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LogsOutputGraylogStreamList contains a list of LogsOutputGraylogStreams
type LogsOutputGraylogStreamList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LogsOutputGraylogStream `json:"items"`
}

// Repository type metadata.
var (
	LogsOutputGraylogStream_Kind             = "LogsOutputGraylogStream"
	LogsOutputGraylogStream_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LogsOutputGraylogStream_Kind}.String()
	LogsOutputGraylogStream_KindAPIVersion   = LogsOutputGraylogStream_Kind + "." + CRDGroupVersion.String()
	LogsOutputGraylogStream_GroupVersionKind = CRDGroupVersion.WithKind(LogsOutputGraylogStream_Kind)
)

func init() {
	SchemeBuilder.Register(&LogsOutputGraylogStream{}, &LogsOutputGraylogStreamList{})
}
