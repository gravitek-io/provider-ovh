// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LogsRoleInitParameters struct {

	// The role description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The role name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The service name
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`
}

type LogsRoleObservation struct {

	// Role creation date
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// The role description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The role name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Number of members in the role
	NbMember *float64 `json:"nbMember,omitempty" tf:"nb_member,omitempty"`

	// Number of permissions assigned to the role
	NbPermission *float64 `json:"nbPermission,omitempty" tf:"nb_permission,omitempty"`

	// Role identifier
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`

	// The service name
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Role last update date
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type LogsRoleParameters struct {

	// The role description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The role name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The service name
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`
}

// LogsRoleSpec defines the desired state of LogsRole
type LogsRoleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LogsRoleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider LogsRoleInitParameters `json:"initProvider,omitempty"`
}

// LogsRoleStatus defines the observed state of LogsRole.
type LogsRoleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LogsRoleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// LogsRole is the Schema for the LogsRoles API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type LogsRole struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.description) || (has(self.initProvider) && has(self.initProvider.description))",message="spec.forProvider.description is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceName) || (has(self.initProvider) && has(self.initProvider.serviceName))",message="spec.forProvider.serviceName is a required parameter"
	Spec   LogsRoleSpec   `json:"spec"`
	Status LogsRoleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LogsRoleList contains a list of LogsRoles
type LogsRoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LogsRole `json:"items"`
}

// Repository type metadata.
var (
	LogsRole_Kind             = "LogsRole"
	LogsRole_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LogsRole_Kind}.String()
	LogsRole_KindAPIVersion   = LogsRole_Kind + "." + CRDGroupVersion.String()
	LogsRole_GroupVersionKind = CRDGroupVersion.WithKind(LogsRole_Kind)
)

func init() {
	SchemeBuilder.Register(&LogsRole{}, &LogsRoleList{})
}
