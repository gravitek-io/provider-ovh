// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LogsRolePermissionStreamInitParameters struct {

	// Role ID to which the permission will be appended
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`

	// Service name
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Graylog stream ID to be associated as a permission
	StreamID *string `json:"streamId,omitempty" tf:"stream_id,omitempty"`
}

type LogsRolePermissionStreamObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Permission ID
	PermissionID *string `json:"permissionId,omitempty" tf:"permission_id,omitempty"`

	// Permission type (e.g., READ_ONLY)
	PermissionType *string `json:"permissionType,omitempty" tf:"permission_type,omitempty"`

	// Role ID to which the permission will be appended
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`

	// Service name
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Graylog stream ID to be associated as a permission
	StreamID *string `json:"streamId,omitempty" tf:"stream_id,omitempty"`
}

type LogsRolePermissionStreamParameters struct {

	// Role ID to which the permission will be appended
	// +kubebuilder:validation:Optional
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`

	// Service name
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Graylog stream ID to be associated as a permission
	// +kubebuilder:validation:Optional
	StreamID *string `json:"streamId,omitempty" tf:"stream_id,omitempty"`
}

// LogsRolePermissionStreamSpec defines the desired state of LogsRolePermissionStream
type LogsRolePermissionStreamSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LogsRolePermissionStreamParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider LogsRolePermissionStreamInitParameters `json:"initProvider,omitempty"`
}

// LogsRolePermissionStreamStatus defines the observed state of LogsRolePermissionStream.
type LogsRolePermissionStreamStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LogsRolePermissionStreamObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// LogsRolePermissionStream is the Schema for the LogsRolePermissionStreams API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type LogsRolePermissionStream struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.roleId) || (has(self.initProvider) && has(self.initProvider.roleId))",message="spec.forProvider.roleId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceName) || (has(self.initProvider) && has(self.initProvider.serviceName))",message="spec.forProvider.serviceName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.streamId) || (has(self.initProvider) && has(self.initProvider.streamId))",message="spec.forProvider.streamId is a required parameter"
	Spec   LogsRolePermissionStreamSpec   `json:"spec"`
	Status LogsRolePermissionStreamStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LogsRolePermissionStreamList contains a list of LogsRolePermissionStreams
type LogsRolePermissionStreamList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LogsRolePermissionStream `json:"items"`
}

// Repository type metadata.
var (
	LogsRolePermissionStream_Kind             = "LogsRolePermissionStream"
	LogsRolePermissionStream_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LogsRolePermissionStream_Kind}.String()
	LogsRolePermissionStream_KindAPIVersion   = LogsRolePermissionStream_Kind + "." + CRDGroupVersion.String()
	LogsRolePermissionStream_GroupVersionKind = CRDGroupVersion.WithKind(LogsRolePermissionStream_Kind)
)

func init() {
	SchemeBuilder.Register(&LogsRolePermissionStream{}, &LogsRolePermissionStreamList{})
}
