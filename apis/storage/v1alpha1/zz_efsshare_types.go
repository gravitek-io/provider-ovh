// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EFSShareInitParameters struct {

	// Share description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// User-defined name used to generate human readable access path for the share
	MountPointName *string `json:"mountPointName,omitempty" tf:"mount_point_name,omitempty"`

	// Share name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Share protocol
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Service name
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Share size in Gigabytes
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Snapshot ID used to create the share
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`
}

type EFSShareObservation struct {

	// Share creation date
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Share description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// User-defined name used to generate human readable access path for the share
	MountPointName *string `json:"mountPointName,omitempty" tf:"mount_point_name,omitempty"`

	// Share name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Share protocol
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Service name
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Share size in Gigabytes
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Snapshot ID used to create the share
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// Share status
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type EFSShareParameters struct {

	// Share description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// User-defined name used to generate human readable access path for the share
	// +kubebuilder:validation:Optional
	MountPointName *string `json:"mountPointName,omitempty" tf:"mount_point_name,omitempty"`

	// Share name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Share protocol
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Service name
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Share size in Gigabytes
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Snapshot ID used to create the share
	// +kubebuilder:validation:Optional
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`
}

// EFSShareSpec defines the desired state of EFSShare
type EFSShareSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EFSShareParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EFSShareInitParameters `json:"initProvider,omitempty"`
}

// EFSShareStatus defines the observed state of EFSShare.
type EFSShareStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EFSShareObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// EFSShare is the Schema for the EFSShares API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type EFSShare struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.protocol) || (has(self.initProvider) && has(self.initProvider.protocol))",message="spec.forProvider.protocol is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceName) || (has(self.initProvider) && has(self.initProvider.serviceName))",message="spec.forProvider.serviceName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.size) || (has(self.initProvider) && has(self.initProvider.size))",message="spec.forProvider.size is a required parameter"
	Spec   EFSShareSpec   `json:"spec"`
	Status EFSShareStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EFSShareList contains a list of EFSShares
type EFSShareList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EFSShare `json:"items"`
}

// Repository type metadata.
var (
	EFSShare_Kind             = "EFSShare"
	EFSShare_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EFSShare_Kind}.String()
	EFSShare_KindAPIVersion   = EFSShare_Kind + "." + CRDGroupVersion.String()
	EFSShare_GroupVersionKind = CRDGroupVersion.WithKind(EFSShare_Kind)
)

func init() {
	SchemeBuilder.Register(&EFSShare{}, &EFSShareList{})
}
