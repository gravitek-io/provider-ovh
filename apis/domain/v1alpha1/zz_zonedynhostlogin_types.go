// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ZoneDynhostLoginInitParameters struct {

	// Suffix that will be concatenated to the zoneName to create the login
	LoginSuffix *string `json:"loginSuffix,omitempty" tf:"login_suffix,omitempty"`

	// Password of the login
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// Subdomain that the login will be allowed to update (use * to allow all)
	SubDomain *string `json:"subDomain,omitempty" tf:"sub_domain,omitempty"`

	// Zone name
	ZoneName *string `json:"zoneName,omitempty" tf:"zone_name,omitempty"`
}

type ZoneDynhostLoginObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Login name
	Login *string `json:"login,omitempty" tf:"login,omitempty"`

	// Suffix that will be concatenated to the zoneName to create the login
	LoginSuffix *string `json:"loginSuffix,omitempty" tf:"login_suffix,omitempty"`

	// Subdomain that the login will be allowed to update (use * to allow all)
	SubDomain *string `json:"subDomain,omitempty" tf:"sub_domain,omitempty"`

	// Login zone
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`

	// Zone name
	ZoneName *string `json:"zoneName,omitempty" tf:"zone_name,omitempty"`
}

type ZoneDynhostLoginParameters struct {

	// Suffix that will be concatenated to the zoneName to create the login
	// +kubebuilder:validation:Optional
	LoginSuffix *string `json:"loginSuffix,omitempty" tf:"login_suffix,omitempty"`

	// Password of the login
	// +kubebuilder:validation:Optional
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// Subdomain that the login will be allowed to update (use * to allow all)
	// +kubebuilder:validation:Optional
	SubDomain *string `json:"subDomain,omitempty" tf:"sub_domain,omitempty"`

	// Zone name
	// +kubebuilder:validation:Optional
	ZoneName *string `json:"zoneName,omitempty" tf:"zone_name,omitempty"`
}

// ZoneDynhostLoginSpec defines the desired state of ZoneDynhostLogin
type ZoneDynhostLoginSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ZoneDynhostLoginParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ZoneDynhostLoginInitParameters `json:"initProvider,omitempty"`
}

// ZoneDynhostLoginStatus defines the observed state of ZoneDynhostLogin.
type ZoneDynhostLoginStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ZoneDynhostLoginObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ZoneDynhostLogin is the Schema for the ZoneDynhostLogins API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type ZoneDynhostLogin struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.loginSuffix) || (has(self.initProvider) && has(self.initProvider.loginSuffix))",message="spec.forProvider.loginSuffix is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.passwordSecretRef)",message="spec.forProvider.passwordSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.subDomain) || (has(self.initProvider) && has(self.initProvider.subDomain))",message="spec.forProvider.subDomain is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zoneName) || (has(self.initProvider) && has(self.initProvider.zoneName))",message="spec.forProvider.zoneName is a required parameter"
	Spec   ZoneDynhostLoginSpec   `json:"spec"`
	Status ZoneDynhostLoginStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ZoneDynhostLoginList contains a list of ZoneDynhostLogins
type ZoneDynhostLoginList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ZoneDynhostLogin `json:"items"`
}

// Repository type metadata.
var (
	ZoneDynhostLogin_Kind             = "ZoneDynhostLogin"
	ZoneDynhostLogin_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ZoneDynhostLogin_Kind}.String()
	ZoneDynhostLogin_KindAPIVersion   = ZoneDynhostLogin_Kind + "." + CRDGroupVersion.String()
	ZoneDynhostLogin_GroupVersionKind = CRDGroupVersion.WithKind(ZoneDynhostLogin_Kind)
)

func init() {
	SchemeBuilder.Register(&ZoneDynhostLogin{}, &ZoneDynhostLoginList{})
}
