// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ZoneDynhostRecordInitParameters struct {

	// Record IP
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// Record sub-domain
	SubDomain *string `json:"subDomain,omitempty" tf:"sub_domain,omitempty"`

	// Zone name
	ZoneName *string `json:"zoneName,omitempty" tf:"zone_name,omitempty"`
}

type ZoneDynhostRecordObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Record IP
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// Record sub-domain
	SubDomain *string `json:"subDomain,omitempty" tf:"sub_domain,omitempty"`

	// Record TTL (Time to Live)
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// Record zone
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`

	// Zone name
	ZoneName *string `json:"zoneName,omitempty" tf:"zone_name,omitempty"`
}

type ZoneDynhostRecordParameters struct {

	// Record IP
	// +kubebuilder:validation:Optional
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// Record sub-domain
	// +kubebuilder:validation:Optional
	SubDomain *string `json:"subDomain,omitempty" tf:"sub_domain,omitempty"`

	// Zone name
	// +kubebuilder:validation:Optional
	ZoneName *string `json:"zoneName,omitempty" tf:"zone_name,omitempty"`
}

// ZoneDynhostRecordSpec defines the desired state of ZoneDynhostRecord
type ZoneDynhostRecordSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ZoneDynhostRecordParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ZoneDynhostRecordInitParameters `json:"initProvider,omitempty"`
}

// ZoneDynhostRecordStatus defines the observed state of ZoneDynhostRecord.
type ZoneDynhostRecordStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ZoneDynhostRecordObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ZoneDynhostRecord is the Schema for the ZoneDynhostRecords API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type ZoneDynhostRecord struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zoneName) || (has(self.initProvider) && has(self.initProvider.zoneName))",message="spec.forProvider.zoneName is a required parameter"
	Spec   ZoneDynhostRecordSpec   `json:"spec"`
	Status ZoneDynhostRecordStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ZoneDynhostRecordList contains a list of ZoneDynhostRecords
type ZoneDynhostRecordList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ZoneDynhostRecord `json:"items"`
}

// Repository type metadata.
var (
	ZoneDynhostRecord_Kind             = "ZoneDynhostRecord"
	ZoneDynhostRecord_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ZoneDynhostRecord_Kind}.String()
	ZoneDynhostRecord_KindAPIVersion   = ZoneDynhostRecord_Kind + "." + CRDGroupVersion.String()
	ZoneDynhostRecord_GroupVersionKind = CRDGroupVersion.WithKind(ZoneDynhostRecord_Kind)
)

func init() {
	SchemeBuilder.Register(&ZoneDynhostRecord{}, &ZoneDynhostRecordList{})
}
