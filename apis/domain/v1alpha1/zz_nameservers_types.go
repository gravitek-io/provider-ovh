// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NameServersInitParameters struct {

	// Domain name
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// Name servers for the domain
	Servers []ServersInitParameters `json:"servers,omitempty" tf:"servers,omitempty"`
}

type NameServersObservation struct {

	// Domain name
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name servers for the domain
	Servers []ServersObservation `json:"servers,omitempty" tf:"servers,omitempty"`
}

type NameServersParameters struct {

	// Domain name
	// +kubebuilder:validation:Optional
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// Name servers for the domain
	// +kubebuilder:validation:Optional
	Servers []ServersParameters `json:"servers,omitempty" tf:"servers,omitempty"`
}

type ServersInitParameters struct {

	// DNS name server hostname
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// DNS name server IP address
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`
}

type ServersObservation struct {

	// DNS name server hostname
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// DNS name server IP address
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`
}

type ServersParameters struct {

	// DNS name server hostname
	// +kubebuilder:validation:Optional
	Host *string `json:"host" tf:"host,omitempty"`

	// DNS name server IP address
	// +kubebuilder:validation:Optional
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`
}

// NameServersSpec defines the desired state of NameServers
type NameServersSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NameServersParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NameServersInitParameters `json:"initProvider,omitempty"`
}

// NameServersStatus defines the observed state of NameServers.
type NameServersStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NameServersObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NameServers is the Schema for the NameServerss API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type NameServers struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.domain) || (has(self.initProvider) && has(self.initProvider.domain))",message="spec.forProvider.domain is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.servers) || (has(self.initProvider) && has(self.initProvider.servers))",message="spec.forProvider.servers is a required parameter"
	Spec   NameServersSpec   `json:"spec"`
	Status NameServersStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NameServersList contains a list of NameServerss
type NameServersList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NameServers `json:"items"`
}

// Repository type metadata.
var (
	NameServers_Kind             = "NameServers"
	NameServers_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NameServers_Kind}.String()
	NameServers_KindAPIVersion   = NameServers_Kind + "." + CRDGroupVersion.String()
	NameServers_GroupVersionKind = CRDGroupVersion.WithKind(NameServers_Kind)
)

func init() {
	SchemeBuilder.Register(&NameServers{}, &NameServersList{})
}
