// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DsRecordsDsRecordsInitParameters struct {

	// Algorithm name of the DNSSEC key
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// Flag name of the DNSSEC key
	Flags *string `json:"flags,omitempty" tf:"flags,omitempty"`

	// Public key
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`

	// Tag of the DNSSEC key
	Tag *float64 `json:"tag,omitempty" tf:"tag,omitempty"`
}

type DsRecordsDsRecordsObservation struct {

	// Algorithm name of the DNSSEC key
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// Flag name of the DNSSEC key
	Flags *string `json:"flags,omitempty" tf:"flags,omitempty"`

	// Public key
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`

	// Tag of the DNSSEC key
	Tag *float64 `json:"tag,omitempty" tf:"tag,omitempty"`
}

type DsRecordsDsRecordsParameters struct {

	// Algorithm name of the DNSSEC key
	// +kubebuilder:validation:Optional
	Algorithm *string `json:"algorithm" tf:"algorithm,omitempty"`

	// Flag name of the DNSSEC key
	// +kubebuilder:validation:Optional
	Flags *string `json:"flags" tf:"flags,omitempty"`

	// Public key
	// +kubebuilder:validation:Optional
	PublicKey *string `json:"publicKey" tf:"public_key,omitempty"`

	// Tag of the DNSSEC key
	// +kubebuilder:validation:Optional
	Tag *float64 `json:"tag" tf:"tag,omitempty"`
}

type DsRecordsInitParameters struct {

	// Domain name
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// DS Records for the domain
	DsRecords []DsRecordsDsRecordsInitParameters `json:"dsRecords,omitempty" tf:"ds_records,omitempty"`
}

type DsRecordsObservation struct {

	// Domain name
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// DS Records for the domain
	DsRecords []DsRecordsDsRecordsObservation `json:"dsRecords,omitempty" tf:"ds_records,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DsRecordsParameters struct {

	// Domain name
	// +kubebuilder:validation:Optional
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// DS Records for the domain
	// +kubebuilder:validation:Optional
	DsRecords []DsRecordsDsRecordsParameters `json:"dsRecords,omitempty" tf:"ds_records,omitempty"`
}

// DsRecordsSpec defines the desired state of DsRecords
type DsRecordsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DsRecordsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DsRecordsInitParameters `json:"initProvider,omitempty"`
}

// DsRecordsStatus defines the observed state of DsRecords.
type DsRecordsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DsRecordsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DsRecords is the Schema for the DsRecordss API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type DsRecords struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.domain) || (has(self.initProvider) && has(self.initProvider.domain))",message="spec.forProvider.domain is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.dsRecords) || (has(self.initProvider) && has(self.initProvider.dsRecords))",message="spec.forProvider.dsRecords is a required parameter"
	Spec   DsRecordsSpec   `json:"spec"`
	Status DsRecordsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DsRecordsList contains a list of DsRecordss
type DsRecordsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DsRecords `json:"items"`
}

// Repository type metadata.
var (
	DsRecords_Kind             = "DsRecords"
	DsRecords_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DsRecords_Kind}.String()
	DsRecords_KindAPIVersion   = DsRecords_Kind + "." + CRDGroupVersion.String()
	DsRecords_GroupVersionKind = CRDGroupVersion.WithKind(DsRecords_Kind)
)

func init() {
	SchemeBuilder.Register(&DsRecords{}, &DsRecordsList{})
}
