// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServiceKeyInitParameters struct {

	// Context of the key
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// Curve type for Elliptic Curve (EC) keys
	Curve *string `json:"curve,omitempty" tf:"curve,omitempty"`

	// Key name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Okms ID
	OkmsID *string `json:"okmsId,omitempty" tf:"okms_id,omitempty"`

	// The operations for which the key is intended to be used
	Operations []*string `json:"operations,omitempty" tf:"operations,omitempty"`

	// Size of the key to be created
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Type of the key to be created
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ServiceKeyObservation struct {

	// Context of the key
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// Creation time of the key
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Curve type for Elliptic Curve (EC) keys
	Curve *string `json:"curve,omitempty" tf:"curve,omitempty"`

	// Key deactivation reason
	DeactivationReason *string `json:"deactivationReason,omitempty" tf:"deactivation_reason,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Key name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Okms ID
	OkmsID *string `json:"okmsId,omitempty" tf:"okms_id,omitempty"`

	// The operations for which the key is intended to be used
	Operations []*string `json:"operations,omitempty" tf:"operations,omitempty"`

	// Size of the key to be created
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// State of the key
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// Type of the key to be created
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ServiceKeyParameters struct {

	// Context of the key
	// +kubebuilder:validation:Optional
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// Curve type for Elliptic Curve (EC) keys
	// +kubebuilder:validation:Optional
	Curve *string `json:"curve,omitempty" tf:"curve,omitempty"`

	// Key name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Okms ID
	// +kubebuilder:validation:Optional
	OkmsID *string `json:"okmsId,omitempty" tf:"okms_id,omitempty"`

	// The operations for which the key is intended to be used
	// +kubebuilder:validation:Optional
	Operations []*string `json:"operations,omitempty" tf:"operations,omitempty"`

	// Size of the key to be created
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Type of the key to be created
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// ServiceKeySpec defines the desired state of ServiceKey
type ServiceKeySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceKeyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ServiceKeyInitParameters `json:"initProvider,omitempty"`
}

// ServiceKeyStatus defines the observed state of ServiceKey.
type ServiceKeyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceKeyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ServiceKey is the Schema for the ServiceKeys API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type ServiceKey struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.okmsId) || (has(self.initProvider) && has(self.initProvider.okmsId))",message="spec.forProvider.okmsId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.operations) || (has(self.initProvider) && has(self.initProvider.operations))",message="spec.forProvider.operations is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   ServiceKeySpec   `json:"spec"`
	Status ServiceKeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceKeyList contains a list of ServiceKeys
type ServiceKeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceKey `json:"items"`
}

// Repository type metadata.
var (
	ServiceKey_Kind             = "ServiceKey"
	ServiceKey_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceKey_Kind}.String()
	ServiceKey_KindAPIVersion   = ServiceKey_Kind + "." + CRDGroupVersion.String()
	ServiceKey_GroupVersionKind = CRDGroupVersion.WithKind(ServiceKey_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceKey{}, &ServiceKeyList{})
}
