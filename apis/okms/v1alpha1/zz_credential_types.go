// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CredentialInitParameters struct {

	// Type of the certificate (ECDSA or RSA)
	CertificateType *string `json:"certificateType,omitempty" tf:"certificate_type,omitempty"`

	// Valid Certificate Signing Request
	Csr *string `json:"csr,omitempty" tf:"csr,omitempty"`

	// Description of the credential (max 200)
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// List of identity URNs associated with the credential (max 25)
	IdentityUrns []*string `json:"identityUrns,omitempty" tf:"identity_urns,omitempty"`

	// Name of the credential (max 50)
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Okms ID
	OkmsID *string `json:"okmsId,omitempty" tf:"okms_id,omitempty"`

	// Validity in days (default 365, max 365)
	Validity *float64 `json:"validity,omitempty" tf:"validity,omitempty"`
}

type CredentialObservation struct {

	// Certificate PEM of the credential
	CertificatePem *string `json:"certificatePem,omitempty" tf:"certificate_pem,omitempty"`

	// Type of the certificate (ECDSA or RSA)
	CertificateType *string `json:"certificateType,omitempty" tf:"certificate_type,omitempty"`

	// Creation time of the credential
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Valid Certificate Signing Request
	Csr *string `json:"csr,omitempty" tf:"csr,omitempty"`

	// Description of the credential (max 200)
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Expiration time of the credential
	ExpiredAt *string `json:"expiredAt,omitempty" tf:"expired_at,omitempty"`

	// Is the credential generated from CSR
	FromCsr *bool `json:"fromCsr,omitempty" tf:"from_csr,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// List of identity URNs associated with the credential (max 25)
	IdentityUrns []*string `json:"identityUrns,omitempty" tf:"identity_urns,omitempty"`

	// Name of the credential (max 50)
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Okms ID
	OkmsID *string `json:"okmsId,omitempty" tf:"okms_id,omitempty"`

	// Status of the credential
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Validity in days (default 365, max 365)
	Validity *float64 `json:"validity,omitempty" tf:"validity,omitempty"`
}

type CredentialParameters struct {

	// Type of the certificate (ECDSA or RSA)
	// +kubebuilder:validation:Optional
	CertificateType *string `json:"certificateType,omitempty" tf:"certificate_type,omitempty"`

	// Valid Certificate Signing Request
	// +kubebuilder:validation:Optional
	Csr *string `json:"csr,omitempty" tf:"csr,omitempty"`

	// Description of the credential (max 200)
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// List of identity URNs associated with the credential (max 25)
	// +kubebuilder:validation:Optional
	IdentityUrns []*string `json:"identityUrns,omitempty" tf:"identity_urns,omitempty"`

	// Name of the credential (max 50)
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Okms ID
	// +kubebuilder:validation:Optional
	OkmsID *string `json:"okmsId,omitempty" tf:"okms_id,omitempty"`

	// Validity in days (default 365, max 365)
	// +kubebuilder:validation:Optional
	Validity *float64 `json:"validity,omitempty" tf:"validity,omitempty"`
}

// CredentialSpec defines the desired state of Credential
type CredentialSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CredentialParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CredentialInitParameters `json:"initProvider,omitempty"`
}

// CredentialStatus defines the observed state of Credential.
type CredentialStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CredentialObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Credential is the Schema for the Credentials API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type Credential struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.identityUrns) || (has(self.initProvider) && has(self.initProvider.identityUrns))",message="spec.forProvider.identityUrns is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.okmsId) || (has(self.initProvider) && has(self.initProvider.okmsId))",message="spec.forProvider.okmsId is a required parameter"
	Spec   CredentialSpec   `json:"spec"`
	Status CredentialStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CredentialList contains a list of Credentials
type CredentialList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Credential `json:"items"`
}

// Repository type metadata.
var (
	Credential_Kind             = "Credential"
	Credential_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Credential_Kind}.String()
	Credential_KindAPIVersion   = Credential_Kind + "." + CRDGroupVersion.String()
	Credential_GroupVersionKind = CRDGroupVersion.WithKind(Credential_Kind)
)

func init() {
	SchemeBuilder.Register(&Credential{}, &CredentialList{})
}
