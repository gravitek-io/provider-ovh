// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConnectPopConfigInitParameters struct {

	// Customer Private AS
	CustomerBGPArea *float64 `json:"customerBgpArea,omitempty" tf:"customer_bgp_area,omitempty"`

	// ID of the interface
	InterfaceID *float64 `json:"interfaceId,omitempty" tf:"interface_id,omitempty"`

	// OVH Private AS
	OvhBGPArea *float64 `json:"ovhBgpArea,omitempty" tf:"ovh_bgp_area,omitempty"`

	// Service name
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Subnet should be a /30, first IP for OVH, second IP for customer
	Subnet *string `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// Type of the pop configuration
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ConnectPopConfigObservation struct {

	// Customer Private AS
	CustomerBGPArea *float64 `json:"customerBgpArea,omitempty" tf:"customer_bgp_area,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// ID of the interface
	InterfaceID *float64 `json:"interfaceId,omitempty" tf:"interface_id,omitempty"`

	// OVH Private AS
	OvhBGPArea *float64 `json:"ovhBgpArea,omitempty" tf:"ovh_bgp_area,omitempty"`

	// Service name
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Status of the pop configuration
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Subnet should be a /30, first IP for OVH, second IP for customer
	Subnet *string `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// Type of the pop configuration
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ConnectPopConfigParameters struct {

	// Customer Private AS
	// +kubebuilder:validation:Optional
	CustomerBGPArea *float64 `json:"customerBgpArea,omitempty" tf:"customer_bgp_area,omitempty"`

	// ID of the interface
	// +kubebuilder:validation:Optional
	InterfaceID *float64 `json:"interfaceId,omitempty" tf:"interface_id,omitempty"`

	// OVH Private AS
	// +kubebuilder:validation:Optional
	OvhBGPArea *float64 `json:"ovhBgpArea,omitempty" tf:"ovh_bgp_area,omitempty"`

	// Service name
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Subnet should be a /30, first IP for OVH, second IP for customer
	// +kubebuilder:validation:Optional
	Subnet *string `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// Type of the pop configuration
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// ConnectPopConfigSpec defines the desired state of ConnectPopConfig
type ConnectPopConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConnectPopConfigParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ConnectPopConfigInitParameters `json:"initProvider,omitempty"`
}

// ConnectPopConfigStatus defines the observed state of ConnectPopConfig.
type ConnectPopConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConnectPopConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ConnectPopConfig is the Schema for the ConnectPopConfigs API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type ConnectPopConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.interfaceId) || (has(self.initProvider) && has(self.initProvider.interfaceId))",message="spec.forProvider.interfaceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceName) || (has(self.initProvider) && has(self.initProvider.serviceName))",message="spec.forProvider.serviceName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   ConnectPopConfigSpec   `json:"spec"`
	Status ConnectPopConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConnectPopConfigList contains a list of ConnectPopConfigs
type ConnectPopConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConnectPopConfig `json:"items"`
}

// Repository type metadata.
var (
	ConnectPopConfig_Kind             = "ConnectPopConfig"
	ConnectPopConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ConnectPopConfig_Kind}.String()
	ConnectPopConfig_KindAPIVersion   = ConnectPopConfig_Kind + "." + CRDGroupVersion.String()
	ConnectPopConfig_GroupVersionKind = CRDGroupVersion.WithKind(ConnectPopConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&ConnectPopConfig{}, &ConnectPopConfigList{})
}
