// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IPv6RoutedSubrangeInitParameters struct {

	// Your IP v6 block
	Block *string `json:"block,omitempty" tf:"block,omitempty"`

	// IPv6 address (e.g., 2001:41d0:1:1994::1)
	Nexthop *string `json:"nexthop,omitempty" tf:"nexthop,omitempty"`

	// IPv6 CIDR notation (e.g., 2001:41d0::/128)
	RoutedSubrange *string `json:"routedSubrange,omitempty" tf:"routed_subrange,omitempty"`

	// The internal name of your vrack
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`
}

type IPv6RoutedSubrangeObservation struct {

	// Your IP v6 block
	Block *string `json:"block,omitempty" tf:"block,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// IPv6 address (e.g., 2001:41d0:1:1994::1)
	Nexthop *string `json:"nexthop,omitempty" tf:"nexthop,omitempty"`

	// IPv6 CIDR notation (e.g., 2001:41d0::/128)
	RoutedSubrange *string `json:"routedSubrange,omitempty" tf:"routed_subrange,omitempty"`

	// The internal name of your vrack
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`
}

type IPv6RoutedSubrangeParameters struct {

	// Your IP v6 block
	// +kubebuilder:validation:Optional
	Block *string `json:"block,omitempty" tf:"block,omitempty"`

	// IPv6 address (e.g., 2001:41d0:1:1994::1)
	// +kubebuilder:validation:Optional
	Nexthop *string `json:"nexthop,omitempty" tf:"nexthop,omitempty"`

	// IPv6 CIDR notation (e.g., 2001:41d0::/128)
	// +kubebuilder:validation:Optional
	RoutedSubrange *string `json:"routedSubrange,omitempty" tf:"routed_subrange,omitempty"`

	// The internal name of your vrack
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`
}

// IPv6RoutedSubrangeSpec defines the desired state of IPv6RoutedSubrange
type IPv6RoutedSubrangeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IPv6RoutedSubrangeParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider IPv6RoutedSubrangeInitParameters `json:"initProvider,omitempty"`
}

// IPv6RoutedSubrangeStatus defines the observed state of IPv6RoutedSubrange.
type IPv6RoutedSubrangeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IPv6RoutedSubrangeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// IPv6RoutedSubrange is the Schema for the IPv6RoutedSubranges API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type IPv6RoutedSubrange struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.block) || (has(self.initProvider) && has(self.initProvider.block))",message="spec.forProvider.block is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nexthop) || (has(self.initProvider) && has(self.initProvider.nexthop))",message="spec.forProvider.nexthop is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.routedSubrange) || (has(self.initProvider) && has(self.initProvider.routedSubrange))",message="spec.forProvider.routedSubrange is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceName) || (has(self.initProvider) && has(self.initProvider.serviceName))",message="spec.forProvider.serviceName is a required parameter"
	Spec   IPv6RoutedSubrangeSpec   `json:"spec"`
	Status IPv6RoutedSubrangeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IPv6RoutedSubrangeList contains a list of IPv6RoutedSubranges
type IPv6RoutedSubrangeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IPv6RoutedSubrange `json:"items"`
}

// Repository type metadata.
var (
	IPv6RoutedSubrange_Kind             = "IPv6RoutedSubrange"
	IPv6RoutedSubrange_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IPv6RoutedSubrange_Kind}.String()
	IPv6RoutedSubrange_KindAPIVersion   = IPv6RoutedSubrange_Kind + "." + CRDGroupVersion.String()
	IPv6RoutedSubrange_GroupVersionKind = CRDGroupVersion.WithKind(IPv6RoutedSubrange_Kind)
)

func init() {
	SchemeBuilder.Register(&IPv6RoutedSubrange{}, &IPv6RoutedSubrangeList{})
}
