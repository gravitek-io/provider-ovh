// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DedicatedCloudInitParameters struct {

	// your dedicated cloud service
	DedicatedCloud *string `json:"dedicatedCloud,omitempty" tf:"dedicated_cloud,omitempty"`

	// The internal name of your vrack
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`
}

type DedicatedCloudObservation struct {

	// your dedicated cloud service
	DedicatedCloud *string `json:"dedicatedCloud,omitempty" tf:"dedicated_cloud,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The internal name of your vrack
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`
}

type DedicatedCloudParameters struct {

	// your dedicated cloud service
	// +kubebuilder:validation:Optional
	DedicatedCloud *string `json:"dedicatedCloud,omitempty" tf:"dedicated_cloud,omitempty"`

	// The internal name of your vrack
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`
}

// DedicatedCloudSpec defines the desired state of DedicatedCloud
type DedicatedCloudSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DedicatedCloudParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DedicatedCloudInitParameters `json:"initProvider,omitempty"`
}

// DedicatedCloudStatus defines the observed state of DedicatedCloud.
type DedicatedCloudStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DedicatedCloudObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DedicatedCloud is the Schema for the DedicatedClouds API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type DedicatedCloud struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.dedicatedCloud) || (has(self.initProvider) && has(self.initProvider.dedicatedCloud))",message="spec.forProvider.dedicatedCloud is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceName) || (has(self.initProvider) && has(self.initProvider.serviceName))",message="spec.forProvider.serviceName is a required parameter"
	Spec   DedicatedCloudSpec   `json:"spec"`
	Status DedicatedCloudStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DedicatedCloudList contains a list of DedicatedClouds
type DedicatedCloudList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DedicatedCloud `json:"items"`
}

// Repository type metadata.
var (
	DedicatedCloud_Kind             = "DedicatedCloud"
	DedicatedCloud_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DedicatedCloud_Kind}.String()
	DedicatedCloud_KindAPIVersion   = DedicatedCloud_Kind + "." + CRDGroupVersion.String()
	DedicatedCloud_GroupVersionKind = CRDGroupVersion.WithKind(DedicatedCloud_Kind)
)

func init() {
	SchemeBuilder.Register(&DedicatedCloud{}, &DedicatedCloudList{})
}
