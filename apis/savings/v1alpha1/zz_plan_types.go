// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PlanInitParameters struct {

	// Whether Savings Plan should be renewed at the end of the period (defaults to false)
	AutoRenewal *bool `json:"autoRenewal,omitempty" tf:"auto_renewal,omitempty"`

	// Custom display name, used in invoices
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Savings Plan flavor
	Flavor *string `json:"flavor,omitempty" tf:"flavor,omitempty"`

	// Periodicity of the Savings Plan
	Period *string `json:"period,omitempty" tf:"period,omitempty"`

	// ID of the public cloud project
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Size of the Savings Plan
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

type PlanObservation struct {

	// Whether Savings Plan should be renewed at the end of the period (defaults to false)
	AutoRenewal *bool `json:"autoRenewal,omitempty" tf:"auto_renewal,omitempty"`

	// Custom display name, used in invoices
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// End date of the Savings Plan
	EndDate *string `json:"endDate,omitempty" tf:"end_date,omitempty"`

	// Savings Plan flavor
	Flavor *string `json:"flavor,omitempty" tf:"flavor,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Periodicity of the Savings Plan
	Period *string `json:"period,omitempty" tf:"period,omitempty"`

	// Action performed when reaching the end of the period
	PeriodEndAction *string `json:"periodEndAction,omitempty" tf:"period_end_action,omitempty"`

	// End date of the current period
	PeriodEndDate *string `json:"periodEndDate,omitempty" tf:"period_end_date,omitempty"`

	// Start date of the current period
	PeriodStartDate *string `json:"periodStartDate,omitempty" tf:"period_start_date,omitempty"`

	// ID of the service
	ServiceID *float64 `json:"serviceId,omitempty" tf:"service_id,omitempty"`

	// ID of the public cloud project
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Size of the Savings Plan
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Start date of the Savings Plan
	StartDate *string `json:"startDate,omitempty" tf:"start_date,omitempty"`

	// Status of the Savings Plan
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type PlanParameters struct {

	// Whether Savings Plan should be renewed at the end of the period (defaults to false)
	// +kubebuilder:validation:Optional
	AutoRenewal *bool `json:"autoRenewal,omitempty" tf:"auto_renewal,omitempty"`

	// Custom display name, used in invoices
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Savings Plan flavor
	// +kubebuilder:validation:Optional
	Flavor *string `json:"flavor,omitempty" tf:"flavor,omitempty"`

	// Periodicity of the Savings Plan
	// +kubebuilder:validation:Optional
	Period *string `json:"period,omitempty" tf:"period,omitempty"`

	// ID of the public cloud project
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Size of the Savings Plan
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

// PlanSpec defines the desired state of Plan
type PlanSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PlanParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PlanInitParameters `json:"initProvider,omitempty"`
}

// PlanStatus defines the observed state of Plan.
type PlanStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PlanObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Plan is the Schema for the Plans API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type Plan struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.displayName) || (has(self.initProvider) && has(self.initProvider.displayName))",message="spec.forProvider.displayName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.flavor) || (has(self.initProvider) && has(self.initProvider.flavor))",message="spec.forProvider.flavor is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.period) || (has(self.initProvider) && has(self.initProvider.period))",message="spec.forProvider.period is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceName) || (has(self.initProvider) && has(self.initProvider.serviceName))",message="spec.forProvider.serviceName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.size) || (has(self.initProvider) && has(self.initProvider.size))",message="spec.forProvider.size is a required parameter"
	Spec   PlanSpec   `json:"spec"`
	Status PlanStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PlanList contains a list of Plans
type PlanList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Plan `json:"items"`
}

// Repository type metadata.
var (
	Plan_Kind             = "Plan"
	Plan_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Plan_Kind}.String()
	Plan_KindAPIVersion   = Plan_Kind + "." + CRDGroupVersion.String()
	Plan_GroupVersionKind = CRDGroupVersion.WithKind(Plan_Kind)
)

func init() {
	SchemeBuilder.Register(&Plan{}, &PlanList{})
}
